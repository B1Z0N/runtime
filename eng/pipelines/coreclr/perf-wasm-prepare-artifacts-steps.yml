parameters:
  configForBuild: 'Release'

variables:
  - name: _dotnetScriptPath
    value: ./dotnet.sh
    condition: eq($(_hostedOs), 'Linux')
  - name: _dotnetScriptPath
    value: .\dotnet.cmd
    condition: eq($(_hostedOs), 'windows')

steps:
  - script: >-
      $(_dotnetScriptPath) build -p:TargetOS=Browser -p:TargetArchitecture=wasm /nr:false /p:TreatWarningsAsErrors=true
      /p:Configuration=${{ parameters.configForBuild }}
      /p:ContinuousIntegrationBuild=true
      /t:InstallWorkloadUsingArtifacts
      $(Build.SourcesDirectory)/src/tests/BuildWasmApps/Wasm.Build.Tests/Wasm.Build.Tests.csproj
    displayName: "Install workload using artifacts"

  - script: >-
      mkdir -p $(Build.SourcesDirectory)/artifacts/staging &&
      cp -r $(Build.SourcesDirectory)/artifacts/bin/dotnet-workload $(Build.SourcesDirectory)/artifacts/staging &&
      cp -r $(Build.SourcesDirectory)/artifacts/bin/microsoft.netcore.app.runtime.browser-wasm $(Build.SourcesDirectory)/artifacts/staging &&
      cp -r $(Build.SourcesDirectory)/artifacts/bin/microsoft.netcore.app.ref $(Build.SourcesDirectory)/artifacts/staging
    displayName: "Prepare artifacts staging directory (Linux)"
    condition: eq($(_hostedOs), 'Linux')

  - script: >-
      mkdir $(Build.SourcesDirectory)\artifacts\staging\dotnet-workload &&
      mkdir $(Build.SourcesDirectory)\artifacts\staging\microsoft.netcore.app.runtime.browser-wasm &&
      mkdir $(Build.SourcesDirectory)\artifacts\staging\microsoft.netcore.app.ref &&
      robocopy /s $(Build.SourcesDirectory)\artifacts\bin\dotnet-workload $(Build.SourcesDirectory)\artifacts\staging\dotnet-workload &&
      robocopy /s $(Build.SourcesDirectory)\artifacts\bin\microsoft.netcore.app.runtime.browser-wasm $(Build.SourcesDirectory)\artifacts\staging &&
      robocopy /s $(Build.SourcesDirectory)\artifacts\bin\microsoft.netcore.app.ref $(Build.SourcesDirectory)\artifacts\staging
    displayName: "Prepare artifacts staging directory (Windows)"
    condition: eq($(_hostedOs), 'windows')

  - template: /eng/pipelines/common/upload-artifact-step.yml
    parameters:
      rootFolder: '$(Build.SourcesDirectory)/artifacts/staging'
      includeRootFolder: true
      displayName: Browser Wasm Artifacts
      artifactName: $(buildProductArtifactName)
      archiveType: $(archiveType)
      archiveExtension: $(archiveExtension)
